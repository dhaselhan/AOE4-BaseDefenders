--[[ 

EXAMPLE GAME MODE SCRIPT

This script demonstrates how to use an assortment of SCAR (Scripting at Relic) functions to create a Game Mode for Age of Empires IV. 
We demonstrate how to setup a simple win condition that awards victory to the first player who constructs 5 houses and covers an assortment of topics like building/unit spawning, event tracking, and much more.

Search for the following topic titles (e.g. OPTIONS, RULES, etc.) in this script to see examples of their usage. 

- OPTIONS allow you to add buttons to the Skirmish/Custom lobby when your Game Mode is selected and trigger functions based on what the host has selected. The buttons are added in the Options section of the Win Condition .rdo file and their functionality is driven by this script.
- RULES allow you to call script functions after a delay, on an interval, or whenever a game event (e.g. a unit is killed) occurs.
- OBJECTIVES communicate what the players' goals are and how they are progressing towards them using a UI element at the top left of their screen.
- ENTITIES are the objects you see in-game, like player constructed buildings, Sacred Sites, Stone Deposits, and Trees. Type "Entity_" in this script to view a list of functions you can use to manipulate these objects.
- SQUADS are in-game units. Type "Squad_" in this script to view a list of functions you can use to manipulate these objects.
- ENTITY GROUPS and SQUAD GROUPS (aka EGROUPS/SGROUPS) are bundles of Entities/Squads. It sometimes makes sense to add a number of objects to a group so you can manipulate them together (e.g. you may want to add a group of Spearmen to an SGROUP so you can command them all to attack a location).
- UPGRADES unlock functionality for a player, a unit, or a building.
- BLUEPRINTS are the instructions needed to create an Entity, Squad, or Upgrade. For example, a blueprint exists for each Civilization Villager. If you want to spawn a Mongol Villager, you will need to reference the Mongol Villager Blueprint. Type "BP_" in this script to view a list of Blueprint functions.
- EVENT CUES are messages that appear in the queue at the bottom-right of the player's screen. Some event cues occur automatically, like when an upgrade completes. You can configure your own event cues to communicate important game mode events to the player.

To play and test this Game Mode:

1. From the editor toolbar, select File > Save All to save any changes you have made to this mod.
2. From the editor toolbar, select Build > Build Mod.
3. Launch Age of Empires IV.
4. In the game client, navigate to Single Player > Skirmish > Create Game (alternatively, you can navigate to Multiplayer > Custom > Create Game).
5. In the Game Setup tab of the lobby, select the Edit button.
6. Select your Game Mode* and Start Game.

*Your Game Mode will have a red wrench icon next to it. This means that it is a local mod and you cannot launch with other players in the lobby. If you would like to play this Game Mode with other players, you will either need to:
1. Share your mod file with another player and have them place it in the following directory: YourDriveHere:\Users\YourNameHere\Documents\My Games\Cardinal\mods\extension\local 
2. Publish your Mod from the Mods > My Mods screen. This will publish your Game Mode to all Age of Empires IV players! When a host selects your Game Mode, it will automatically be downloaded for other players in the lobby.


Additional documentation and function references can be found online.

]]

-----------------------------------------------------------------------
-- Imported Scripts

-- When you import a .scar file it will be initialized alongside your Game Mode .scar script. 
-- You can also call functions from imported scripts directly. For example, cardinal.scar has a function called Player_SetCurrentAge() that allows you to set the age of a given player. To use this function, you first have to import cardinal.scar as is demonstrated below.
-- To examine the below scripts, right-click on the import() function and select "Open Document"
-----------------------------------------------------------------------
print("Starting Mod")
-- Import Utility Scripts
import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar")							-- Contains game helper functions

-- Import Gameplay Systems
import("gameplay/score.scar")					-- Tracks player score
import("gameplay/diplomacy.scar")				-- Manages Tribute

-- Import Win Conditions
import("winconditions/annihilation.scar")		-- Support for eliminating a player when they can no longer fight or produce units
import("winconditions/elimination.scar")		-- Support for player quitting or dropping (through pause menu or disconnection)
import("winconditions/surrender.scar")			-- Support for player surrender (through pause menu)

-- Import UI Support
import("gameplay/chi/current_dynasty_ui.scar")	-- Displays Chinese Dynasty UI
import("gameplay/event_cues.scar")
import("gameplay/currentageui.scar")

import("Utils.scar")
import("WaveGenerator.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

-- Global data table that can be referenced in script functions (e.g. _mod.module = "Mod")
_mod = {
	module = "Mod",
	objective_title = "$7132049379674616a02592d1db956d72:13",
	options = {},
	icons = {
		objective = "icons\\races\\common\\victory_conditions\\victory_condition_conquest",
	},
}



-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------
local options_selected = {}
local waveNumber = 0

local MIN_DIST = 150
local MAX_DIST = 350

-- Called during load as part of the game setup sequence
function Mod_OnGameSetup()
end

-- Called before initialization, preceding other module OnInit functions
function Mod_PreInit()
	
	-- Enables the Tribute UI by calling the TributeEnabled function in diplomacy.scar, which was imported at the top of this script
	-- Remove this or set to false if you do not want players to have access to resource trading via the Tribute panel
	Core_CallDelegateFunctions("DiplomacyEnabled", false)
	Core_CallDelegateFunctions("TributeEnabled", true)
end

-- Called on match initialization before handing control to the player
function Mod_OnInit()
	Mod_FindTownCenter() -- Store Players Town Locations
	
    Setup_GetWinConditionOptions(options_selected)
	
	-- Store the local player so we can reference them later
	localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	
	-- Setup the player's objective UI by calling the below function directly
	Mod_SetupObjective()
		
	for i, player in pairs(PLAYERS) do
		-- Set player starting resources
		-- RT stands for Resource Type
		Player_SetResource(player.id, RT_Food, 400)		
		Player_SetResource(player.id, RT_Wood, 300)
		Player_SetResource(player.id, RT_Gold, 200)
		Player_SetResource(player.id, RT_Stone, 200)
		
		-- Delete their town centers
		if Player_GetTeam(player.id) == 1 then
			Entity_DeSpawn(player.town_center.entity)
		end
	end
	
	Rule_AddOneShot(Mod_StartBuildPhase, 0.5)
end

-- Called after initialization is done when game is fading up from black
function Mod_Start()
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Mod_OnGameOver()
end

-----------------------------------------------------------------------
-- Mod Functions
-----------------------------------------------------------------------

-- This function creates the objective UI that appears in the top-left corner of each player's screen
function Mod_SetupObjective()
	
	-- Check if an objective has not been created yet
	if _mod.objective == nil then
		_mod.objective = Obj_Create(localPlayer.id, "Survive the Waves", Loc_Empty(), _mod.icons.objective, "ConquestObjectiveTemplate", localPlayer.raceName, OT_Primary, 0, "conquestObj")

		Obj_SetState(_mod.objective, OS_Incomplete)
		Obj_SetVisible(_mod.objective, true)
		Obj_SetProgressVisible(_mod.objective, true)
		
		-- Initialize Counters
		Obj_SetCounterType(_mod.objective, COUNTER_CountUpTo)
		Obj_SetCounterMax(_mod.objective, options_selected.GameFlow.MaxWaves)
		
		-- Set progress
		Obj_SetCounterCount(_mod.objective, 0)
		Obj_SetProgress(_mod.objective, 0)
	end
end

function Mod_StartBuildPhase()
    local seconds = options_selected.GameFlow.BuildPhaseMinutes * 60
    Rule_AddOneShot(StartWaveCycle, seconds)
    -- TODO: Countdown Announcement
end

function StartWaveCycle()
    waveNumber = 1
	SpawnNextWave()
    Rule_AddInterval(SpawnNextWave, options_selected.GameFlow.WaveSpawnTime)
end

function SpawnNextWave()
	local diff = 2 -- #TODO: Replace with dynamic difficulty logic or option
	local tier = math.ceil(waveNumber / options_selected.GameFlow.MaxWaves * 4)
	
	print("Spawning Wave")

	-- Spawn waves for each human player
	for i, player in pairs(PLAYERS) do
	
		if Player_GetTeam(player.id) == 0 and player.town_center then
			local spawn_position = GetEnemySpawnPosition(player.town_center.position)
			local move_position = Util_GetOffsetPosition(player.town_center.position, 0, 0)

			-- Each AI player sends attackers to this human
			for j, enemy_player in pairs(PLAYERS) do
				if Player_GetTeam(enemy_player.id) == 1 then
					print("Team 2 Loop")
					
					local civ = Player_GetRaceName(enemy_player.id)
					local sbp_table = WaveGenerator_GenerateSBPTable(waveNumber, tier, civ)
					
					local sgroup_name = "sg_enemies_wave_" .. waveNumber .. "_p" .. tostring(enemy_player.id)
					local sg_enemy_attacker = SGroup_CreateIfNotFound(sgroup_name)

					-- To Spawn Multiple": { sbp = sbp, numSquads = count }, { sbp = sbp, numSquads = count }
					UnitEntry_DeploySquads(enemy_player.id, sg_enemy_attacker, sbp_table, spawn_position)

					Cmd_Ability(sg_enemy_attacker, BP_GetAbilityBlueprint("core_formation_line"))
					Cmd_FormationMove(sg_enemy_attacker, move_position, false)
				end
			end
		end
	end

	-- Show wave message
	local event_cue_text = Loc_FormatText("$7132049379674616a02592d1db956d72:23", waveNumber)
	ShowMessage(event_cue_text)
	
	-- Set progress
	Obj_SetCounterCount(_mod.objective, waveNumber)
	Obj_SetProgress(_mod.objective, waveNumber / options_selected.GameFlow.MaxWaves)

	-- Increment and check wave count
	waveNumber = waveNumber + 1
	if waveNumber > tonumber(options_selected.GameFlow.MaxWaves) then
		Rule_Remove(SpawnNextWave)
		Rule_AddOneShot(CheckVictoryCondition, 10)
	end
end

function GetEnemySpawnPosition(attack_target)
	local angle = World_GetRand(0, 359)
	local dist = World_GetRand(MIN_DIST, MAX_DIST)

	return Util_GetOffsetPosition(attack_target, angle, dist)
end

function CheckVictoryCondition()
	if waveNumber >= options_selected.GameFlow.MaxWaves then
		for _, pl in pairs(PLAYERS) do
			if Player_GetTeam(pl.id) == 1 then
				Core_OnGameOver(pl.id, "defeat")
				Core_SetPlayerDefeated(pl.id, Mod_LoserPresentation, WR_CONQUEST)
			else
				Core_OnGameOver(pl.id, "victory")
				Core_SetPlayerVictorious(pl.id, Mod_WinnerPresentation, WR_CONQUEST)
			end
		end
    end
end


-- Victory Presentation 
-- This creates the large "Victory" stinger that animates for winning players at the end of a match
function Mod_WinnerPresentation(playerID)
	
	-- If player is local
	if playerID == localPlayer.id then
		
		-- Clear player's selection
		Misc_ClearSelection()
		-- Hide UI
		Taskbar_SetVisibility(false)		
		-- Set Win Condition Objective to complete
		Obj_SetState(_mod.objective, OS_Complete)

		-- Trigger objective complete pop up
		Obj_CreatePopup(_mod.objective, _mod.objective_title)
		-- Play Victory sfx
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE)
		-- Set objective to invisible
		Obj_SetVisible(_mod.objective, false)
		
		-- Create Victory Stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, { 
			_playerID = playerID, 
			_icon = _mod.icons.objective, 
			_endType = Loc_GetString(11161277), 					-- "VICTORY"  
			_message = Loc_Empty(),
			_sound = "mus_stinger_landmark_objective_complete_success", 
			_videoURI = "stinger_victory" 
		})
	end
end

-- Defeat Presentation
-- This creates the large "Defeat" stinger that animates for losing players at the end of a match
function Mod_LoserPresentation(playerID)
	-- If player is local
	if playerID == localPlayer.id then
		
		-- Clear player's selection
		Misc_ClearSelection()
		-- Hide UI
		Taskbar_SetVisibility(false)		
		-- Set Win Condition Objective to failed
		Obj_SetState(_mod.objective, OS_Failed)

		-- Trigger objective complete pop up
		Obj_CreatePopup(_mod.objective, _mod.objective_title)
		-- Play Victory sfx
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
		-- Set objective to invisible
		Obj_SetVisible(_mod.objective, false)

		-- Create Defeat Stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = _mod.icons.objective, 
			_endType = Loc_GetString(11045235), 					-- "DEFEAT"  
			_message = Loc_Empty(),
			_sound = "mus_stinger_landmark_objective_complete_fail", 
			_videoURI = "stinger_defeat"})
	end
end

function Mod_FindTownCenter()
	-- This is a for loop that does something for each player in the match.
	-- PLAYERS is a table that contains all of the players in the match.
	-- If there are two players it will run twice, if there are eight players it will run eight times, etc.
	for i, player in pairs(PLAYERS) do
		
		-- Get the player's entities and place them into an ENTITY GROUP
		local eg_player_entities = Player_GetEntities(player.id)
		-- Filter out everything in the ENTITY GROUP except for the Town Center
		EGroup_Filter(eg_player_entities, "town_center", FILTER_KEEP)
		-- Get the Town Center ENTITY by getting the first entry in the ENTITY GROUP we just filtered
		local entity =  EGroup_GetEntityAt(eg_player_entities, 1)
		-- Get the Town Center's ENTITY ID
		-- Some functions require the ENTITY ID to perform an action on the ENTITY
		local entity_id = Entity_GetID(entity)
		-- Get the Town Center's position
		local position = Entity_GetPosition(entity)
		
		-- Store the player's Town Center information so it can be referenced later
		player.town_center = {
			entity = entity,
			entity_id = entity_id,
			position = position,
		}
	end
end